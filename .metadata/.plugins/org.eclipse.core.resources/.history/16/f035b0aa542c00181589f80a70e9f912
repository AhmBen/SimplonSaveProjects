package evaljdbc;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Scanner;

import Model.Category;
import Model.Food;

/**
  * Classe principale du programme
  * 
  * @author Xavier Tagliarino
  * @name Main
  * @access public
  *
  */

public class Main {
	
	/**
	  * Object scanner pour entrée utilisateur
	  * 
	  * @author Xavier Tagliarino <xavier.tagliarino@gmail.com>
	  * @access public static
	  * @name scanner
	  * @var Scnanner
	  * 
	  */
	
	private static Scanner scanner = new Scanner(System.in);

	
	/**
	  * Tente de lancer une méthode dynamiquement via l'API réflexivité
	  * 
	  * @name lancerMethode
	  * @param String : nom de la méthode
	  * @return boolean : indique si la méthode a pu être lancée
	  * 
	  */
	
	public static  boolean lancerMethode(String methode)
	{
		Class types[] = {  }; 
		
		Method method;
		
		try {
			
			//Récupération de la méthode
			method = Main.class.getMethod(methode, types);
			//Aucun paramètre n'est envoyé
			Object parametres[] = {  };
			
			try {
				method.invoke(null, parametres);
			} catch (IllegalAccessException e) {				
				e.printStackTrace();
				return false;
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
				return false;
			} catch (InvocationTargetException e) {
				e.printStackTrace();
				return false;
			}
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
			return false;
		} catch (SecurityException e) {
			e.printStackTrace();
			return false;
		}
		
		return true;
	}
	
	public static void main(String[] args) {
		
		
		try {
			
			//Récupération des infos sur l'application lancée
			ResourceBundle rs 	=	ResourceBundle.getBundle("config");
			String name 		=	rs.getString("appli.name");
			String version 		=	rs.getString("appli.version");
			String contactName 		=	rs.getString("contact.name");
			String contactMail 		=	rs.getString("contact.email");
			//Message de bienvenu	
			System.out.println("***************************************");
			System.out.println("*** "+name+" "+version+" *** ");
			System.out.println("***************************************");
			System.out.println("--------------------------------------------------------------------------------------------------------");
			System.out.println("Pour toute réclamation adressez vous à "+contactName+" en lui écrivant à : "+contactMail);
			System.out.println("--------------------------------------------------------------------------------------------------------");
		}catch(MissingResourceException e) {
			  System.out.println("Hoho ! il faut vérifier le chemin du fichier properties");		 
			}			
		
		//3, 2, 1 : et on démarre
		System.out.println("Vous allez y entrer dans :");	
		waitALittle();
		
		//Démarrage
		System.out.println("Go !!!!!!!");
								
		//Indication pour savoir si on doit quitter l'application
		boolean quit = false;		
		
		while(!quit) {
			
			//Affichage du menu
			System.out.println("**************************");
			System.out.println("Que souhaitez vous faire ?");
			System.out.println("**************************");
			
			/* Fabrication du menu */
			MenuAppli menu = new MenuAppli();
			
			//On quitte le programme
			menu.add(new ItemMenu("Quitter cette superbe application de la mort qui tue !!", "quit"));
			//On affiche l'intégralité de la base de données
			menu.add(new ItemMenu("Afficher tout en détail détail", "displayAll"));
			//Catégories
			menu.add(new ItemMenu("Afficher les catégories", "displayCats"));
			menu.add(new ItemMenu("Créer une catégorie", "createCat"));
			menu.add(new ItemMenu("Modifier une catégorie", "updateCat"));
			menu.add(new ItemMenu("Effacer une catégorie", "deleteCat"));		
			
			//On autorise ces actions uniquement si au moins une catégorie existe
			if(Category.list().size() > 0) {
				//Aliments
				menu.add(new ItemMenu("Créer un aliment", "createFood"));
				menu.add(new ItemMenu("Modifier un aliment", "updateFood"));
				menu.add(new ItemMenu("Effacer un aliment", "deleteFood"));
			}
			
			//On affiche le menu
			System.out.println(menu);
			
			if(Category.list().size() == 0) {
				System.out.println("Vous devez créer au moins une catégorie pour afficher les actions sur les aliments");
			}
			
			//Déclenchement de la méthode dynamiquement
			try{
				
				int choixClavier = Integer.parseInt(scanner.nextLine());
				String methodeALancer = menu.getItemMenus().get(choixClavier).getAction();
				
				
				//Choix Zéro : on quitte
				if(choixClavier == 0) { quit = true; }
				
				//On déclenche la méthode
				if(!lancerMethode(methodeALancer)) {
					System.err.println("Il semble que l'action que vous tentez de lancer soit indisponible");
				}
				//On patiente un peu entre chaque action
				waitALittle();				
				
			}catch(NumberFormatException e) {
				System.err.println("** veuillez saisir une valeur numérique !!! **");
				waitALittle();
			}catch(IndexOutOfBoundsException e) {
				System.err.println("** Ce choix est IMPOSSIBLE !!! ** ");
				waitALittle();
			}
			
		}
		
		//Fin du programme
		System.out.println("Vous partez déjà ?? :(");
	}
	
	/*
	 * Afiche les catégories sans leur aliments
	 * 
	 * @access public static
	 * @name displayCats
	 * @return void
	 * 
	 */
	
	public static void displayCats() {
		
		ArrayList<Category> listCategories = Category.list();
		
		if(listCategories.size() == 0) { 
			System.err.println("Aucune catégorie n'est disponible dans la bdd");
			return; 
		}
		
		for(Category category : listCategories) {
			System.out.println(category);
		}
		
	}
	
	/*
	 * Efface une catégorie via un id sélectioné
	 * 
	 * @access public static
	 * @name deleteCat
	 * @return void
	 * 
	 */
	
	public static void deleteCat() {
		
		//On affiche les catégories
		displayCats();
				
		//On récupère la saisie de l'id de la catégorie à supprimer
		int catId = 0;
		
		while(catId == 0) {
			
			catId = recupererChoixInt("Quel est l'id de la catégorie à supprimer ?");
						
			Category category = new Category();
			
			//Si on on ne trouve pas la catégorie
			if(!category.find(catId)) {
				catId = 0;
				System.out.println("Il n'y pas de catégorie avec cet Id");
			}
			//Si on a trouvé la catégorie
			else
			{
				//On tente la suppression
				if(category.delete()) {
					System.out.println("La catégorie : "+category.getName()+" vient d'être supprimée avec succès");
				}else {
					System.err.println("Il y a eu un problème technique lors de la suppression de la catégorie :"+category.getName());
				}				
			}
			
			//On affiche à nouveau la liste à jour des catégories
			displayCats();
		}	
		
	}
	
	/**
	  * Crée un catégorie via une saisie des infos
	  *  - name
	  * 
	  * @access public static
	  * @name createCat
	  * @return void
	  *  
	  */
	
	public static void createCat() {
		
		//On affiche la liste des catégories à jour
		displayCats();
		//On récupère l'info name pour créer la catégorie
		String catName = recupererChoixString("Quelle est le nom de la catégorie à créer ?");			
		
		Category category = new Category(catName);
		//On tente une création
		if(category.create()) {
			System.out.println("La catégorie : "+category.getName()+" a été créée avec succèss");
		}
		//Création échouée
		else {
			System.err.println("Il y a eu un problème lors de la création de la catégorie : "+category.getName());
		}
		
		//On réaffiche la liste de catégories mises à jour 
		displayCats();
		
	}
	
	/**
	  * Met à jour une catégorie en sélectionnant un id
	  * Puis on saisie les infos :
	  * -name
	  *
	  * @access public static
	  * @name updateCat
	  * @return void
	  * 
	  */
	
	public static void updateCat() {
		
		//On affiche la liste des catégories à jour
		displayCats();
		//On demande l'id de la catégorie à modifier
		int catIt = recupererChoixInt("Quelle est l'id de la catégorie à mettre à jour ?");
			
		Category category = new Category();		
		//Si on trouve la catégorie
		if(category.find(catIt)) {
			String catName = recupererChoixString("Quelle est le nom de la catégorie à mettre à jour ?");
			category.setName(catName);
			//On tente une mise à jour
			if(category.update()) {
				System.out.println("Catégorie "+category.getName()+" mise à jour avec succès");
			}
			//Mise à jour échouée
			else {
				System.err.println("Il y a eu un probmlème de mise à jour de la catégorie "+category.getName());
				
			}
			
			//On affiche la liste de catégories mise à jour
			displayCats();
			return;
		}
		else {
			System.out.println("Catégorie introuvable !!");
		}
	}
	
	/**
	  * Affiche toute la base de données :
	  * 2 niveaux :
	  * - Catégorie
	  * -- Aliments
	  *
	  * @access public static
	  * @name displayAll
	  * @return void
	  * 
	  */	
	
	public static void displayAll() {
		
		ArrayList<Category> listCategories = Category.list();
		
		if(listCategories.size() == 0) { 
			System.err.println("Aucune catégorie n'est disponible dans la bdd");
			return; 
		}		
		
		System.out.println("******");	
		
		
		
		for(Category category : listCategories) {
			
			
			
			String[] tabLegendCategories = {"N°=","Nom"};
			String legendCategories = "";
			
			int lengthColsCatgeories = 14;
			
			for(int i = 0 ; i < (lengthColsCatgeories + 2) * tabLegendCategories.length ; i++) {
				legendCategories += "-";
			}
			
			legendCategories += "\n";
			
			for(String str : tabLegendCategories) {
				legendCategories += "|"+String.format("%-"+lengthColsCatgeories+"s", str)+"|";
			}
			
			legendCategories += "\n";
			
			
			
			for(int i = 0 ; i < (lengthColsCatgeories + 2) * tabLegendCategories.length ; i++) {
				legendCategories += "-";
			}
			
			System.out.println(legendCategories);
			
			System.out.print(category);		
			
			
			
			ArrayList<Food> foods = category.getFoods();
			if(foods.size() > 0) {				
				System.out.println("** Les aliments sont les suivants **");
								
				String[] tabString = {
						"N° = "			,
						"Nom : "		,
						"Protein :"		,
						"Glucide :"		,
						"Lipide :"		,
						"Calories : "	,
						"Unite : "
				};				
				
				String legend = "";
				int lengthCols = 14;				
				
				for(int i = 0 ; i < (lengthCols + 2) * tabString.length ; i++) {
					legend += "-";
				}
				legend += "\n";
				
				for(String str : tabString) {
					legend += "|"+String.format("%-"+lengthCols+"s", str)+"|";
				}
				
				legend += "\n";
				
				for(int i = 0 ; i < (lengthCols + 2) * tabString.length ; i++) {
					legend += "-";
				}
				
				System.out.println(legend);
				
				
				for(Food food : foods) {
					System.out.print(food);				
				}
				
			}
			else {
				System.out.println("- pas d'aliment -");
			}
		}
	}
	
	/*
	 * Supprime un aliment
	 * 
	 * @access public static
	 * @name deleteFood
	 * @return void
	 * 
	 */
	
	public static void deleteFood() {
		
		//Rien ne sert d'y aller si aucune catégorie n'existe dans la bdd
		if(Category.list().size() <= 0) {
			System.err.println("Opération impossible car aucune catégorie n'est présente dans la base de données");
			return; 
		}
		
		ArrayList<Category> Categories = Category.list();
		int nbFoods = 0;
		for(Category category : Categories) {
			nbFoods += category.getFoods().size();
		}
		
		if(nbFoods == 0) {
			System.err.println("Opération impossible car aucun aliment n'est présente dans la base de données");
			return;
		}
		
		//On affiche toute la bdd
		displayAll();
		
		//On demande l'id de l'aliment à supprimer
		int foodId = 0;
		
		while(foodId == 0) {
			foodId = recupererChoixInt("Quel est l'id de l'aliment à supprimer ?");
						
			Food food = new Food();
			//Si l'aliment n'est pas trouvé
			if(!food.find(foodId)) {
				foodId = 0;
				System.out.println("Il n'y pas d'aliment avec cet Id");
			}
			//On a trouvé l'aliment
			else
			{
				//On supprime l'aliment
				if(food.delete()) {
					System.out.println("La suppression de l'aliment : "+food.getName());
				}
				//On n'y est pas arrivé 
				else {
					System.err.println("Problème lors de la suppression de l'aliment : "+food.getName());
				}
			}
		}
		
		//On affiche la bdd à jour
		displayAll();
	}
	
	/**
	  * On Créer un aliment en l'affectant à une catégorie et on demande de infos :
	  * - name
	  * - proteine
	  * - glucide
	  * - lipide
	  * 
	  * @access public static
	  * @name createFood
	  * @return void
	  * 
	  */
	
	public static void createFood() {
		
		//Rien ne sert d'y aller si aucune catégorie n'existe dans la bdd
		if(Category.list().size() <= 0) {
			System.err.println("Opération impossible car aucune catégorie n'est présente dans la base de données");
			return; 
		}
		//On affiche toute la bdd
		displayAll();
		
		//On demande à quelle catégorie relier l'aliment
		int catId = 0;
		Category category = new Category();
		Food food;
		while(catId == 0) {		
			catId = recupererChoixInt("Quel est l'id de la catégorie où ajouter l'aliment ?");
			
			if(!category.find(catId)) {
				System.err.println("Veuillez choisir une catégorie existante !!");
				catId = 0;
			}			
		}
		
		//On demande les infos de l'aliment
		//name
		String name = recupererChoixString("Nom de l'aliment ?");
		//proteine
		int protein = recupererChoixInt("Protéine ?");
		//glucide
		int glucid = recupererChoixInt("Glucide ?");
		//lipide
		int lipid = recupererChoixInt("Lipide ?");
		
		//On tente de créer l'aliment
		food = new Food(name,protein,glucid,lipid);
		food.setCategory(category);
		//Si on y arrive
		if(food.create()) {
			System.out.println("L'aliment : "+food.getName()+" a été créé avec succès ");
		}
		//Si la création n'a pas fonctionné
		else {
			System.err.println("problème de création de l'aliment : "+food.getName());
		}
			
		//On affiche la bdd à jour
		displayAll();
		
	
		
	}
	
	/**
	  * Met à jour un aliment à partir de son id plus d'autres infos :
	  * - name
	  * - proteine
	  * - glucide
	  * - lipide
	  *  On ne modifie pas sa catégorie
	  * 
	  * @access public static
	  * @name updateFood
	  * @return void
	  * 
	  */
	
	public static void updateFood() {
		
		//Rien ne sert d'y aller si aucune catégorie n'existe dans la bdd
		if(Category.list().size() <= 0) {
			System.err.println("Opération impossible car aucune catégorie n'est présente dans la base de données");
			return; 
		}
		//On affiche la bdd à jour
		displayAll();
		int foodId = 0;
		//Category category = new Category();
		Food food = new Food();
		while(foodId == 0) {		
			foodId = recupererChoixInt("Quel est l'id de l'aliment à modifier ?");
			
			if(!food.find(foodId)) {
				System.err.println("Veuillez choisir un aliment existant !!");
				foodId = 0;
			}			
		}
		
		//On demande les infos de l'aliment
		//name
		String name = recupererChoixString("Nom de l'aliment ?");
		//proteine
		int protein = recupererChoixInt("Protéine ?");
		//glucide
		int glucid = recupererChoixInt("Glucide ?");
		//lipide
		int lipid = recupererChoixInt("Lipide ?");
		
		//On tente la mise à jour
		food = new Food(foodId, name,protein,glucid,lipid);
		
		if(food.update()) {
			System.out.println("La mise à jour de l'aliment : "+food.getName()+" s'est déroulée avec succès");
		}
		//Mise à jour ratée
		else {
			System.err.println("Problème lors de la mise à jour de l'aliment : "+food.getName());
		}
		//On affiche la bdd à jour
		displayAll();
	}
	
	/**
	  * Méthode permettant de factoriser la récupération d'un entier à la console via le scanner
	  *  
	  * @param String : question
	  * @return int : saisie
	  * @name recupererChoixInt
	  */
	
	
	public static int recupererChoixInt(String question) {
		System.out.println(question);
		int choixClavier = 0;
		boolean choixKo = true;
		
		while(choixKo) {
			try{
				choixClavier = Integer.parseInt(scanner.nextLine());
				choixKo = false;
			}
			catch(NumberFormatException e) {
				System.out.println("veuillez saisir une valeur numérique");
			}
		}
		return choixClavier;
		
	}
	

	/**
	  * Méthode permettant de factoriser la récupération d'un entier à la console via le scanner
	  *  
	  * @param String : question
	  * @return int : saisie
	  * @name recupererChoixString
	  */
	
	public static String recupererChoixString(String question) {
		
		System.out.println(question);
		
		String choixClavier="";
		try{
			choixClavier = scanner.nextLine();			
		}
		catch(NumberFormatException e) {
			System.out.println("veuillez saisir une valeur numérique");
		}
		return choixClavier;
		
	}
	
	/*
	 * Met en attente
	 *
	 * @access public static
	 * @name waitALittle
	 * @return void
	 * 
	 **/
	
	public static void waitALittle() {
		
		System.out.println("Go dans : ");
		
		for(int i = 3 ; i > 0 ; i--) {
			System.out.print(i+" ");				
			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {				
				e.printStackTrace();
			}
		}
		
		System.out.println();
	}
	
	/*
	 * Dit "GoodBye !!"
	 *
	 * @access public static
	 * @name quit
	 * @return void
	 * 
	 **/
	
	public static void quit() {
		System.out.println("GoodBye !!!");
		System.exit(0);
	}

}
