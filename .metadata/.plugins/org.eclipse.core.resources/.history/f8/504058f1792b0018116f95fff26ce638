import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;

public class Reflexivite {

	
	public static Object executerMethode(Object objet, String nomMethode, Object[] parametres) throws Exception {

		Object retour;

		Class[] typeParametres = null;	 

		if (parametres != null) {
			typeParametres = new Class[parametres.length];
	
			for (int i = 0; i < parametres.length; ++i) {
				typeParametres[i] = parametres[i].getClass();
			}
		}

		Method m = objet.getClass().getMethod(nomMethode, typeParametres);

		if (Modifier.isStatic(m.getModifiers())) {
			retour = m.invoke(null, parametres);
		} else {
			retour = m.invoke(objet, parametres);

		}

		return retour;

		}
	
	public static void main(String[] args) {	
		
		//Détail de ma classe
		String nameClass = "Personne";
		try {		
			
			
			//récupération de la class "Class"
			Class<?> classPersonne = Class.forName(nameClass);
			System.out.println(" **** Je suis la classe : "+classPersonne.getClass()+" qui contient toutes les infos utiles de :"+classPersonne.getName()+" **** ");
			//Nom
			System.out.println("Classe étudiée: "+classPersonne.getName());
			//Attributs
			Field[] fields = classPersonne.getDeclaredFields();
			System.out.println("*** Je possèdes : "+fields.length+" champs déclarés ***");
			for(int i = 0 ; i < fields.length ; i++) {
				Field field = fields[i];				
				System.out.println("  - Attribut	: '"+field.getName()+"'	- type : "+field.getType()+" Ma visibilité est : "+Modifier.toString(field.getModifiers()));
			}
			//Méthodes
			Method[] methods = classPersonne.getDeclaredMethods();
			System.out.println("*** Je possèdes : "+methods.length+" méthodes déclarés que chez moi ***");
			for(int i = 0 ; i < methods.length ; i++) {
				Method method = methods[i];
				Class<?>[] params = method.getParameterTypes();
				System.out.println(" - La méthode '"+method.getName()+"' qui attend "+params.length+" paramètres");
				
				for(int j = 0 ; j < params.length ; j++) {
					System.out.println("-- Paramètre N°= "+(j+1)+" : '"+params[j].getSimpleName()+"'");
				}
			}			
			
			
			
			
			//Héritage
			Class<?> superClass = classPersonne;
			int 
			i = 0;
			System.out.println("** voici ma hiérarchie **");
			
			while(superClass != null) {
				System.out.print("|");
				for(int j = 0 ; j <= i*2 ; j++) {
					System.out.print("__");
				}
				System.out.println(" "+superClass.getSimpleName());
				superClass = superClass.getSuperclass();				
				i++;
			}
			
			//Modifier un champ privé
			Personne pers = new Personne("", "", 2);
			Class<?> persClass = pers.getClass();
			
			try {
				Field field;
				field = persClass.getDeclaredField("age");
				field.setAccessible(true);
				field.set(pers,14);
				System.out.println(pers.getAge());
			} catch (NoSuchFieldException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
			//Intanciation habituelle
			System.out.println(" **** Essais d'instanciation : **** ");
			Personne d = new Personne("Checa","David",38);
			Personne d2 = new Personne("Checa","David",38);
			d.presenter("Yeah ! ");
			System.out.println(d.equals(d2));
			//Instanciation via reflexivité
			Constructor<?> constructeurPersonne = classPersonne.getConstructor(String.class,String.class,int.class);
			Object david = constructeurPersonne.newInstance(new String("Checa"), new String("David"), new Integer(38));
			Class<?>[] types = new Class[]{String.class};
			Method methodePresenter = classPersonne.getMethod("presenter",types);
			methodePresenter.invoke(david, new String("Yeah ! "));
			
			
		} catch (ClassNotFoundException e) {
			System.out.println("La Classe "+nameClass+" n'existe pas !");			
			e.printStackTrace();
		} catch (NoSuchMethodException e) {			
			System.out.println("Ce n'est pas la bonne méthode qui est appelée (mauvais constructeur ou mauvais nom de méthode");
			e.printStackTrace();
		} catch (SecurityException e) {			
			e.printStackTrace();
		} catch (InstantiationException e) {			
			e.printStackTrace();
		} catch (IllegalAccessException e) {			
			e.printStackTrace();
		} catch (IllegalArgumentException e) {			
			System.out.println("Un mauvais type d'argument est passé : "+e.getMessage());
			e.printStackTrace();
		} catch (InvocationTargetException e) {			
			e.printStackTrace();
		}		
	}

}
